<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bpm.lj.mes.base.server.mapper.base.BaseStandaraProcessMapper">
  <resultMap id="BaseResultMap" type="com.bpm.lj.mes.base.server.domain.BaseStandaraProcess">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="process_code" jdbcType="VARCHAR" property="processCode" />
    <result column="process_name" jdbcType="VARCHAR" property="processName" />
    <result column="work_center_code" jdbcType="VARCHAR" property="workCenterCode" />
    <result column="work_center_name" jdbcType="VARCHAR" property="workCenterName" />
    <result column="reporting_point" jdbcType="INTEGER" property="reportingPoint" />
    <result column="backflush_process" jdbcType="INTEGER" property="backflushProcess" />
    <result column="option_dependent" jdbcType="INTEGER" property="optionDependent" />
    <result column="outsourcing_process" jdbcType="INTEGER" property="outsourcingProcess" />
    <result column="billing_point" jdbcType="INTEGER" property="billingPoint" />
    <result column="plan_outsourcing_process" jdbcType="INTEGER" property="planOutsourcingProcess" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, process_code, process_name, work_center_code, work_center_name, reporting_point, 
    backflush_process, option_dependent, outsourcing_process, billing_point, plan_outsourcing_process, 
    remark
  </sql>
  <select id="selectByExample" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcessExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from base_standara_process
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from base_standara_process
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from base_standara_process
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcessExample">
    delete from base_standara_process
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcess">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into base_standara_process (process_code, process_name, work_center_code, 
      work_center_name, reporting_point, backflush_process, 
      option_dependent, outsourcing_process, billing_point, 
      plan_outsourcing_process, remark)
    values (#{processCode,jdbcType=VARCHAR}, #{processName,jdbcType=VARCHAR}, #{workCenterCode,jdbcType=VARCHAR}, 
      #{workCenterName,jdbcType=VARCHAR}, #{reportingPoint,jdbcType=INTEGER}, #{backflushProcess,jdbcType=INTEGER}, 
      #{optionDependent,jdbcType=INTEGER}, #{outsourcingProcess,jdbcType=INTEGER}, #{billingPoint,jdbcType=INTEGER}, 
      #{planOutsourcingProcess,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcess">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into base_standara_process
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="processCode != null">
        process_code,
      </if>
      <if test="processName != null">
        process_name,
      </if>
      <if test="workCenterCode != null">
        work_center_code,
      </if>
      <if test="workCenterName != null">
        work_center_name,
      </if>
      <if test="reportingPoint != null">
        reporting_point,
      </if>
      <if test="backflushProcess != null">
        backflush_process,
      </if>
      <if test="optionDependent != null">
        option_dependent,
      </if>
      <if test="outsourcingProcess != null">
        outsourcing_process,
      </if>
      <if test="billingPoint != null">
        billing_point,
      </if>
      <if test="planOutsourcingProcess != null">
        plan_outsourcing_process,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="processCode != null">
        #{processCode,jdbcType=VARCHAR},
      </if>
      <if test="processName != null">
        #{processName,jdbcType=VARCHAR},
      </if>
      <if test="workCenterCode != null">
        #{workCenterCode,jdbcType=VARCHAR},
      </if>
      <if test="workCenterName != null">
        #{workCenterName,jdbcType=VARCHAR},
      </if>
      <if test="reportingPoint != null">
        #{reportingPoint,jdbcType=INTEGER},
      </if>
      <if test="backflushProcess != null">
        #{backflushProcess,jdbcType=INTEGER},
      </if>
      <if test="optionDependent != null">
        #{optionDependent,jdbcType=INTEGER},
      </if>
      <if test="outsourcingProcess != null">
        #{outsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="billingPoint != null">
        #{billingPoint,jdbcType=INTEGER},
      </if>
      <if test="planOutsourcingProcess != null">
        #{planOutsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcessExample" resultType="java.lang.Long">
    select count(*) from base_standara_process
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update base_standara_process
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.processCode != null">
        process_code = #{record.processCode,jdbcType=VARCHAR},
      </if>
      <if test="record.processName != null">
        process_name = #{record.processName,jdbcType=VARCHAR},
      </if>
      <if test="record.workCenterCode != null">
        work_center_code = #{record.workCenterCode,jdbcType=VARCHAR},
      </if>
      <if test="record.workCenterName != null">
        work_center_name = #{record.workCenterName,jdbcType=VARCHAR},
      </if>
      <if test="record.reportingPoint != null">
        reporting_point = #{record.reportingPoint,jdbcType=INTEGER},
      </if>
      <if test="record.backflushProcess != null">
        backflush_process = #{record.backflushProcess,jdbcType=INTEGER},
      </if>
      <if test="record.optionDependent != null">
        option_dependent = #{record.optionDependent,jdbcType=INTEGER},
      </if>
      <if test="record.outsourcingProcess != null">
        outsourcing_process = #{record.outsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="record.billingPoint != null">
        billing_point = #{record.billingPoint,jdbcType=INTEGER},
      </if>
      <if test="record.planOutsourcingProcess != null">
        plan_outsourcing_process = #{record.planOutsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update base_standara_process
    set id = #{record.id,jdbcType=INTEGER},
      process_code = #{record.processCode,jdbcType=VARCHAR},
      process_name = #{record.processName,jdbcType=VARCHAR},
      work_center_code = #{record.workCenterCode,jdbcType=VARCHAR},
      work_center_name = #{record.workCenterName,jdbcType=VARCHAR},
      reporting_point = #{record.reportingPoint,jdbcType=INTEGER},
      backflush_process = #{record.backflushProcess,jdbcType=INTEGER},
      option_dependent = #{record.optionDependent,jdbcType=INTEGER},
      outsourcing_process = #{record.outsourcingProcess,jdbcType=INTEGER},
      billing_point = #{record.billingPoint,jdbcType=INTEGER},
      plan_outsourcing_process = #{record.planOutsourcingProcess,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcess">
    update base_standara_process
    <set>
      <if test="processCode != null">
        process_code = #{processCode,jdbcType=VARCHAR},
      </if>
      <if test="processName != null">
        process_name = #{processName,jdbcType=VARCHAR},
      </if>
      <if test="workCenterCode != null">
        work_center_code = #{workCenterCode,jdbcType=VARCHAR},
      </if>
      <if test="workCenterName != null">
        work_center_name = #{workCenterName,jdbcType=VARCHAR},
      </if>
      <if test="reportingPoint != null">
        reporting_point = #{reportingPoint,jdbcType=INTEGER},
      </if>
      <if test="backflushProcess != null">
        backflush_process = #{backflushProcess,jdbcType=INTEGER},
      </if>
      <if test="optionDependent != null">
        option_dependent = #{optionDependent,jdbcType=INTEGER},
      </if>
      <if test="outsourcingProcess != null">
        outsourcing_process = #{outsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="billingPoint != null">
        billing_point = #{billingPoint,jdbcType=INTEGER},
      </if>
      <if test="planOutsourcingProcess != null">
        plan_outsourcing_process = #{planOutsourcingProcess,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bpm.lj.mes.base.server.domain.BaseStandaraProcess">
    update base_standara_process
    set process_code = #{processCode,jdbcType=VARCHAR},
      process_name = #{processName,jdbcType=VARCHAR},
      work_center_code = #{workCenterCode,jdbcType=VARCHAR},
      work_center_name = #{workCenterName,jdbcType=VARCHAR},
      reporting_point = #{reportingPoint,jdbcType=INTEGER},
      backflush_process = #{backflushProcess,jdbcType=INTEGER},
      option_dependent = #{optionDependent,jdbcType=INTEGER},
      outsourcing_process = #{outsourcingProcess,jdbcType=INTEGER},
      billing_point = #{billingPoint,jdbcType=INTEGER},
      plan_outsourcing_process = #{planOutsourcingProcess,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>